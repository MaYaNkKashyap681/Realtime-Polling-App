const express = require('express');
const app = express();
const http = require('http');
const { Server } = require('socket.io');

const server = http.createServer(app);
const io = new Server(server);
// Map to store user information
const idUserMap = {};
// Map to store polling questions
const roomQuestionMap = {};
// Map to store timers
const roomTimerMap = {};
const correctAnswer = {};
const userScoreMap = {};

// Function to get all clients in a room
function getAllClientsInRoom(roomId) {
    return Array.from(io.sockets.adapter.rooms.get(roomId) || []).map((socketId) => {
        return {
            socketId,
            userName: idUserMap[socketId],
        };
    });
}

function clientsExceptAdmin(clientArray, adminName) {
    let newArray = [];

    for (let i of clientArray) {
        if (i.name === adminName) {
            continue;
        } else {
            newArray.push(i);
        }
    }
    return newArray;
}

function resetUserScores(roomId) {
    userScoreMap[roomId] = {};
}

// Function to calculate cumulative scores
function calculateCumulativeScores(responses) {
    const cumulativeScores = {};

    for (const option in responses) {
        responses[option].forEach((userName) => {
            if (!cumulativeScores[userName]) {
                cumulativeScores[userName] = 0;
            }
            cumulativeScores[userName]++;
        });
    }

    return cumulativeScores;
}

// Connection event
io.on('connection', (socket) => {
    // Join room event
    socket.on('joinroom', ({ roomId, userName }, err) => {
        idUserMap[socket.id] = userName;
        socket.join(roomId);
        const clientsInRoom = getAllClientsInRoom(roomId);
        console.log(clientsInRoom);

        // Emit new user join event to every user in the room
        clientsInRoom.forEach(({ socketId }) => {
            io.to(socketId).emit('newusercount', {
                clientsNumber: clientsInRoom.length,
            });
        });

        // If there is a question for the room, send it to the new user
        if (roomQuestionMap[roomId]) {
            io.to(socket.id).emit('question', roomQuestionMap[roomId]);
        }

        // If there is a timer for the room, send it to the new user
        if (roomTimerMap[roomId]) {
            io.to(socket.id).emit('timer', roomTimerMap[roomId]);
        }
    });

    // Create question event
    socket.on('createquestion', ({ roomId, question, adminName }) => {
        const ques = question.question
        console.log(question);
        roomQuestionMap[roomId] = ques;
        correctAnswer[roomId] = question.correctOption;


        // Emit the question to all users in the room
        const clientsInRoom = getAllClientsInRoom(roomId);
        clientsExceptAdmin(clientsInRoom, adminName).forEach(({ socketId }) => {
            io.to(socketId).emit('question', question);
        });

        // Set timer for the room (e.g., 60 seconds)
        roomTimerMap[roomId] = 20;

        // Update the timer every second and emit it to all users in the room
        const timerInterval = setInterval(() => {
            roomTimerMap[roomId]--;
            if (roomTimerMap[roomId] > 0) {
                clientsExceptAdmin(clientsInRoom, adminName).forEach(({ socketId }) => {
                    io.to(socketId).emit('timer', {
                        "time": roomTimerMap[roomId]
                    });
                });
            } else {
                clearInterval(timerInterval);
                roomQuestionMap[roomId] = null;
                roomTimerMap[roomId] = null;

                const cumulativeScores = calculateCumulativeScores(roomResponsesMap[roomId]);

                // Emit cumulative scores to all users in the room
                clientsExceptAdmin(clientsInRoom, adminName).forEach(({ socketId }) => {
                    io.to(socketId).emit('cumulativeScores', cumulativeScores);
                });

                clientsExceptAdmin(clientsInRoom, adminName).forEach(({ socketId }) => {
                    io.to(socketId).emit('question', {
                        "question": null
                    });
                    io.to(socketId).emit('timer', {
                        "time": null
                    });
                });
            }
        }, 1000);
    });

    socket.on('optionMark', ({ option, roomId }) => {
        const correctOption = correctAnswer[roomId];

        if (option == correctOption) {
            // If the selected option is correct, emit a 'correct' event to the user
            io.to(socket.id).emit('answerResult', {
                result: 'correct',
            });
        } else {
            // If the selected option is incorrect, emit a 'wrong' event to the user
            io.to(socket.id).emit('answerResult', {
                result: 'wrong',
            });
        }
    })





    // Disconnecting event
    socket.on('disconnecting', () => {
        const rooms = [...socket.rooms];
        rooms.forEach((roomId) => {
            socket.in(roomId).emit('leftroom', {
                socketId: socket.id,
                userName: idUserMap[socket.id],
            });
        });
        delete idUserMap[socket.id];
        socket.leave();
    });
});

// Starting the Server
const PORT = 3000;
server.listen(PORT, () => {
    console.log(`Listening on port ${PORT}`);
});



--------------
--------------


const express = require('express');
const app = express();
const http = require('http');
const { Server } = require('socket.io');

const server = http.createServer(app);
const io = new Server(server);

// Map to store user information
const idUserMap = {};

// Map to store polling questions
const roomQuestionMap = {};

// Map to store timers
const roomTimerMap = {};

const correctAnswer = {};

// Function to get all clients in a room
function getAllClientsInRoom(roomId) {
    return Array.from(io.sockets.adapter.rooms.get(roomId) || []).map((socketId) => {
        return {
            socketId,
            userName: idUserMap[socketId],
        };
    });
}

function clientsExceptAdmin(clientArray, adminName) {
    let newArray = [];

    for (let i of clientArray) {
        if (i.name === adminName) {
            continue;
        } else {
            newArray.push(i);
        }
    }
    return newArray;
}

// Connection event
io.on('connection', (socket) => {
    // Join room event
    socket.on('joinroom', ({ roomId, userName }, err) => {
        idUserMap[socket.id] = userName;
        socket.join(roomId);
        const clientsInRoom = getAllClientsInRoom(roomId);
        console.log(clientsInRoom);

        // Emit new user join event to every user in the room
        clientsInRoom.forEach(({ socketId }) => {
            io.to(socketId).emit('newusercount', {
                clientsNumber: clientsInRoom.length,
            });
        });

        // If there is a question for the room, send it to the new user
        if (roomQuestionMap[roomId]) {
            io.to(socket.id).emit('question', roomQuestionMap[roomId]);
        }

        // If there is a timer for the room, send it to the new user
        if (roomTimerMap[roomId]) {
            io.to(socket.id).emit('timer', roomTimerMap[roomId]);
        }
    });

    // Create question event
    socket.on('createquestion', ({ roomId, question, adminName }) => {
        const ques = question.question
        console.log(question);
        roomQuestionMap[roomId] = ques;
        correctAnswer[roomId] = question.correctOption;

        
        // Emit the question to all users in the room
        const clientsInRoom = getAllClientsInRoom(roomId);
        clientsExceptAdmin(clientsInRoom, adminName).forEach(({ socketId }) => {
            io.to(socketId).emit('question', question);
        });

        // Set timer for the room (e.g., 60 seconds)
        roomTimerMap[roomId] = 20;

        // Update the timer every second and emit it to all users in the room
        const timerInterval = setInterval(() => {
            roomTimerMap[roomId]--;
            if (roomTimerMap[roomId] > 0) {
                clientsExceptAdmin(clientsInRoom, adminName).forEach(({ socketId }) => {
                    io.to(socketId).emit('timer', {
                        "time": roomTimerMap[roomId]
                    });
                });
            } else {
                clearInterval(timerInterval);
                roomQuestionMap[roomId] = null;
                roomTimerMap[roomId] = null;
                clientsExceptAdmin(clientsInRoom, adminName).forEach(({ socketId }) => {
                    io.to(socketId).emit('question', {
                       "question": null
                    });
                    io.to(socketId).emit('timer', {
                        "time": null});
                });
            }
        }, 1000);
    });

    socket.on('optionMark', ({option, roomId}) => {
        const correctOption = correctAnswer[roomId];
        
        if (option == correctOption) {
            // If the selected option is correct, emit a 'correct' event to the user
            io.to(socket.id).emit('answerResult', {
                result: 'correct',
            });
        } else {
            // If the selected option is incorrect, emit a 'wrong' event to the user
            io.to(socket.id).emit('answerResult', {
                result: 'wrong',
            });
        }
    })

    // Disconnecting event
    socket.on('disconnecting', () => {
        const rooms = [...socket.rooms];
        rooms.forEach((roomId) => {
            socket.in(roomId).emit('leftroom', {
                socketId: socket.id,
                userName: idUserMap[socket.id],
            });
        });
        delete idUserMap[socket.id];
        socket.leave();
    });
});

// Starting the Server
const PORT = 3000;
server.listen(PORT, () => {
    console.log(`Listening on port ${PORT}`);
});


------------------
------------------

const express = require('express');
const http = require('http');
const { Server } = require('socket.io');

class QuizServer {
  constructor() {
    this.app = express();
    this.server = http.createServer(this.app);
    this.io = new Server(this.server);
    this.idUserMap = {};
    this.roomQuestionMap = {};
    this.roomTimerMap = {};
    this.correctAnswer = {};
    this.responsesTable = {};

    this.setupSocket();
  }

  setupSocket() {
    this.io.on('connection', (socket) => {
      const quizSocket = new QuizSocket(socket, this);
      quizSocket.setupListeners();
    });
  }

  startServer(port = 3000) {
    this.server.listen(port, () => {
      console.log(`Listening on port ${port}`);
    });
  }
}

class QuizSocket {
  constructor(socket, quizServer) {
    this.socket = socket;
    this.quizServer = quizServer;
  }

  setupListeners() {
    this.socket.on('joinroom', this.onJoinRoom.bind(this));
    this.socket.on('createquestion', this.onCreateQuestion.bind(this));
    this.socket.on('optionMark', this.onOptionMark.bind(this));
    this.socket.on('quizend', this.onQuizEnd.bind(this));
    this.socket.on('finalscores', this.onFinalScores.bind(this));
    this.socket.on('disconnecting', this.onDisconnecting.bind(this));
  }

  onJoinRoom({ roomId, userName }) {
    this.quizServer.responsesTable[roomId] = {};
    this.quizServer.idUserMap[this.socket.id] = userName;
    this.socket.join(roomId);
    const clientsInRoom = this.getAllClientsInRoom(roomId);

    clientsInRoom.forEach(({ socketId }) => {
      this.quizServer.io.to(socketId).emit('newusercount', {
        clientsNumber: clientsInRoom.length - 1,
      });
    });

    if (this.quizServer.roomQuestionMap[roomId]) {
      this.quizServer.io.to(this.socket.id).emit('question', this.quizServer.roomQuestionMap[roomId]);
    }

    if (this.quizServer.roomTimerMap[roomId]) {
      this.quizServer.io.to(this.socket.id).emit('timer', this.quizServer.roomTimerMap[roomId]);
    }
  }

  onCreateQuestion({ roomId, question, adminName }) {
    const ques = question.question;
    this.quizServer.roomQuestionMap[roomId] = ques;
    this.quizServer.correctAnswer[roomId] = question.correctOption;
    const clientsInRoom = this.getAllClientsInRoom(roomId);

    clientsInRoom.forEach(({ socketId }) => {
      if (socketId !== this.socket.id) {
        this.quizServer.io.to(socketId).emit('question', question);
      }
    });

    this.quizServer.roomTimerMap[roomId] = 10;

    const timerInterval = setInterval(() => {
      this.quizServer.roomTimerMap[roomId]--;
      if (this.quizServer.roomTimerMap[roomId] > 0) {
        clientsInRoom.forEach(({ socketId }) => {
          if (socketId !== this.socket.id) {
            this.quizServer.io.to(socketId).emit('timer', {
              time: this.quizServer.roomTimerMap[roomId],
            });
          }
        });
      } else {
        clearInterval(timerInterval);
        this.quizServer.roomQuestionMap[roomId] = null;
        this.quizServer.roomTimerMap[roomId] = null;

        this.quizServer.io.to(roomId).emit('cumulativeScores', {
          scores: this.quizServer.responsesTable[roomId],
        });

        clientsInRoom.forEach(({ socketId }) => {
          if (socketId !== this.socket.id) {
            this.quizServer.io.to(socketId).emit('question', {
              question: null,
            });
            this.quizServer.io.to(socketId).emit('timer', {
              time: null,
            });
          }
        });
      }
    }, 1000);
  }

  onOptionMark({ option, roomId }) {
    const correctOption = this.quizServer.correctAnswer[roomId];
    let isCorrect = false;

    if (option == correctOption) {
      isCorrect = true;
      this.quizServer.io.to(this.socket.id).emit('answerResult', {
        result: 'correct',
      });
    } else {
      this.quizServer.io.to(this.socket.id).emit('answerResult', {
        result: 'wrong',
      });
    }

    if (!this.quizServer.responsesTable[roomId][this.quizServer.idUserMap[this.socket.id]]) {
      this.quizServer.responsesTable[roomId][this.quizServer.idUserMap[this.socket.id]] = isCorrect ? 1 : 0;
    } else {
      this.quizServer.responsesTable[roomId][this.quizServer.idUserMap[this.socket.id]] += isCorrect ? 1 : 0;
    }
  }

  onQuizEnd({ roomId }) {
    this.getAllClientsInRoom(roomId).forEach(({ socketId }) => {
      this.quizServer.io.to(socketId).emit('ended', {
        ends: true,
      });
    });
  }

  onFinalScores({ roomId }) {
    this.getAllClientsInRoom(roomId).forEach(({ socketId }) => {
      this.quizServer.io.to(socketId).emit('scores', {
        scores: this.quizServer.responsesTable[roomId],
      });
    });
  }

  onDisconnecting() {
    const rooms = [...this.socket.rooms];
    rooms.forEach((roomId) => {
      this.socket.in(roomId).emit('leftroom', {
        socketId: this.socket.id,
        userName: this.quizServer.idUserMap[this.socket.id],
      });
    });
    delete this.quizServer.idUserMap[this.socket.id];
    this.socket.leave();
  }

  getAllClientsInRoom(roomId) {
    return Array.from(this.quizServer.io.sockets.adapter.rooms.get(roomId) || []).map((socketId) => {
      return {
        socketId,
        userName: this.quizServer.idUserMap[socketId],
      };
    });
  }
}

// Usage
const quizServer = new QuizServer();
quizServer.startServer(3000);
